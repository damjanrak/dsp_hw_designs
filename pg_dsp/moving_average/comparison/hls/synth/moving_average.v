// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="moving_average,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=152,HLS_SYN_LUT=255,HLS_VERSION=2018_2}" *)

module moving_average (
        ap_clk,
        ap_rst,
        din_V,
        din_V_ap_vld,
        din_V_ap_ack,
        cfg_V,
        cfg_V_ap_vld,
        cfg_V_ap_ack,
        dout_V_V,
        dout_V_V_ap_vld,
        dout_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input  [16:0] din_V;
input   din_V_ap_vld;
output   din_V_ap_ack;
input  [31:0] cfg_V;
input   cfg_V_ap_vld;
output   cfg_V_ap_ack;
output  [15:0] dout_V_V;
output   dout_V_V_ap_vld;
input   dout_V_V_ap_ack;

reg din_V_ap_ack;
reg cfg_V_ap_ack;
reg dout_V_V_ap_vld;

reg    din_V_blk_n;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    cfg_V_blk_n;
wire    ap_CS_fsm_state1;
reg    dout_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_8_fu_191_p3;
wire  signed [30:0] OP1_V_cast_fu_152_p1;
reg  signed [30:0] OP1_V_cast_reg_236;
wire   [31:0] tmp_1_fu_156_p1;
reg   [31:0] tmp_1_reg_241;
reg   [0:0] eot_V_reg_251;
reg   [15:0] tmp_V_reg_255;
wire   [31:0] i_fu_185_p2;
reg   [31:0] i_reg_260;
reg    ap_sig_ioackin_dout_V_V_ap_ack;
reg    ap_block_state3_io;
wire   [0:0] tmp_7_fu_199_p2;
reg   [0:0] tmp_7_reg_270;
wire    ap_CS_fsm_state5;
wire   [15:0] accum_V_fu_224_p2;
wire    ap_CS_fsm_state6;
reg   [10:0] shift_reg_V_address0;
reg    shift_reg_V_ce0;
reg    shift_reg_V_we0;
reg   [15:0] shift_reg_V_d0;
wire   [15:0] shift_reg_V_q0;
reg   [15:0] p_Val2_1_reg_116;
reg   [31:0] i_0_in_reg_129;
wire  signed [63:0] tmp_2_fu_211_p1;
wire   [63:0] tmp_9_fu_216_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_3_fu_220_p1;
reg    ap_reg_ioackin_dout_V_V_ap_ack;
wire   [15:0] coef_V_fu_138_p1;
wire   [15:0] window_V_fu_142_p4;
wire  signed [15:0] data_V_fu_160_p1;
wire  signed [30:0] p_Val2_s_fu_230_p2;
wire   [31:0] tmp_s_fu_205_p2;
wire  signed [15:0] p_Val2_s_fu_230_p0;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_reg_ioackin_dout_V_V_ap_ack = 1'b0;
end

moving_average_shbkb #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
shift_reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_V_address0),
    .ce0(shift_reg_V_ce0),
    .we0(shift_reg_V_we0),
    .d0(shift_reg_V_d0),
    .q0(shift_reg_V_q0)
);

moving_average_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
moving_average_mucud_U1(
    .din0(p_Val2_s_fu_230_p0),
    .din1(data_V_fu_160_p1),
    .dout(p_Val2_s_fu_230_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_dout_V_V_ap_ack <= 1'b0;
    end else begin
        if (((tmp_8_fu_191_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            if ((1'b0 == ap_block_state3_io)) begin
                ap_reg_ioackin_dout_V_V_ap_ack <= 1'b0;
            end else if ((dout_V_V_ap_ack == 1'b1)) begin
                ap_reg_ioackin_dout_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_0_in_reg_129 <= i_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        i_0_in_reg_129 <= tmp_1_reg_241;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Val2_1_reg_116 <= accum_V_fu_224_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        p_Val2_1_reg_116 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
        OP1_V_cast_reg_236 <= OP1_V_cast_fu_152_p1;
        tmp_1_reg_241[15 : 0] <= tmp_1_fu_156_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        eot_V_reg_251 <= din_V[32'd16];
        tmp_V_reg_255 <= {{p_Val2_s_fu_230_p2[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_260 <= i_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_7_reg_270 <= tmp_7_fu_199_p2;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_dout_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_dout_V_V_ap_ack = dout_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_dout_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
        cfg_V_ap_ack = 1'b1;
    end else begin
        cfg_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cfg_V_blk_n = cfg_V_ap_vld;
    end else begin
        cfg_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        din_V_ap_ack = 1'b1;
    end else begin
        din_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        din_V_blk_n = din_V_ap_vld;
    end else begin
        din_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_8_fu_191_p3 == 1'd1) & (ap_reg_ioackin_dout_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        dout_V_V_ap_vld = 1'b1;
    end else begin
        dout_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_fu_191_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        dout_V_V_blk_n = dout_V_V_ap_ack;
    end else begin
        dout_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_V_address0 = tmp_3_fu_220_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_V_address0 = tmp_9_fu_216_p1;
    end else if (((tmp_7_fu_199_p2 == 1'd1) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_V_address0 = 64'd0;
    end else if (((tmp_7_fu_199_p2 == 1'd0) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_V_address0 = tmp_2_fu_211_p1;
    end else begin
        shift_reg_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | ((tmp_7_fu_199_p2 == 1'd0) & (1'b0 == ap_block_state3_io) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state3_io) & (tmp_7_fu_199_p2 == 1'd1) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        shift_reg_V_ce0 = 1'b1;
    end else begin
        shift_reg_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        shift_reg_V_d0 = shift_reg_V_q0;
    end else if (((tmp_7_fu_199_p2 == 1'd1) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_V_d0 = tmp_V_reg_255;
    end else begin
        shift_reg_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3_io) & (tmp_7_fu_199_p2 == 1'd1) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((tmp_7_reg_270 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        shift_reg_V_we0 = 1'b1;
    end else begin
        shift_reg_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (eot_V_reg_251 == 1'd1) & (tmp_8_fu_191_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state3_io) & (eot_V_reg_251 == 1'd0) & (tmp_8_fu_191_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state3_io) & (tmp_8_fu_191_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_fu_152_p1 = $signed(coef_V_fu_138_p1);

assign accum_V_fu_224_p2 = (shift_reg_V_q0 + p_Val2_1_reg_116);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state3_io = ((tmp_8_fu_191_p3 == 1'd1) & (ap_sig_ioackin_dout_V_V_ap_ack == 1'b0));
end

assign coef_V_fu_138_p1 = cfg_V[15:0];

assign data_V_fu_160_p1 = din_V[15:0];

assign dout_V_V = p_Val2_1_reg_116;

assign i_fu_185_p2 = ($signed(i_0_in_reg_129) + $signed(32'd4294967295));

assign p_Val2_s_fu_230_p0 = OP1_V_cast_reg_236;

assign tmp_1_fu_156_p1 = window_V_fu_142_p4;

assign tmp_2_fu_211_p1 = $signed(tmp_s_fu_205_p2);

assign tmp_3_fu_220_p1 = i_reg_260;

assign tmp_7_fu_199_p2 = ((i_fu_185_p2 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_191_p3 = i_fu_185_p2[32'd31];

assign tmp_9_fu_216_p1 = i_reg_260;

assign tmp_s_fu_205_p2 = ($signed(i_0_in_reg_129) + $signed(32'd4294967294));

assign window_V_fu_142_p4 = {{cfg_V[31:16]}};

always @ (posedge ap_clk) begin
    tmp_1_reg_241[31:16] <= 16'b0000000000000000;
end

endmodule //moving_average
