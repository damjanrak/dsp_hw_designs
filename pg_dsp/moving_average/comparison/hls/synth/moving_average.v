// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="moving_average,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.100000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=219,HLS_SYN_LUT=317,HLS_VERSION=2018_2}" *)

module moving_average (
        ap_clk,
        ap_rst,
        din_V,
        din_V_ap_vld,
        din_V_ap_ack,
        cfg_V,
        cfg_V_ap_vld,
        cfg_V_ap_ack,
        dout_V_V,
        dout_V_V_ap_vld,
        dout_V_V_ap_ack
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [16:0] din_V;
input   din_V_ap_vld;
output   din_V_ap_ack;
input  [31:0] cfg_V;
input   cfg_V_ap_vld;
output   cfg_V_ap_ack;
output  [15:0] dout_V_V;
output   dout_V_V_ap_vld;
input   dout_V_V_ap_ack;

reg din_V_ap_ack;
reg cfg_V_ap_ack;
reg dout_V_V_ap_vld;

reg    din_V_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    cfg_V_blk_n;
wire    ap_CS_fsm_state1;
reg    dout_V_V_blk_n;
wire    ap_CS_fsm_state5;
reg   [31:0] i6_reg_127;
reg   [31:0] i_0_in5_reg_137;
reg   [15:0] p_Val2_s_7_reg_147;
wire   [15:0] coef_V_fu_180_p1;
reg  signed [15:0] coef_V_reg_295;
reg   [15:0] window_V_reg_300;
reg   [0:0] eot_V_reg_306;
reg   [15:0] tmp_V_1_reg_310;
wire   [31:0] tmp_5_fu_222_p1;
wire  signed [31:0] i1_cast_fu_234_p1;
wire   [0:0] tmp_9_fu_238_p3;
reg   [0:0] tmp_9_reg_326;
wire   [0:0] tmp_7_fu_246_p2;
reg   [0:0] tmp_7_reg_330;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_263_p2;
reg   [31:0] i_reg_339;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_10_fu_269_p3;
reg   [0:0] tmp_10_reg_344;
wire   [15:0] p_Val2_4_fu_282_p2;
reg   [15:0] p_Val2_4_reg_348;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [9:0] shift_reg_V_address0;
reg    shift_reg_V_ce0;
reg    shift_reg_V_we0;
wire   [15:0] shift_reg_V_q0;
wire   [9:0] shift_reg_V_address1;
reg    shift_reg_V_ce1;
reg    shift_reg_V_we1;
reg   [31:0] ap_phi_mux_i6_phi_fu_130_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_i_0_in5_phi_fu_140_p4;
reg   [15:0] ap_phi_mux_tmp_V_pn_phi_fu_161_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_tmp_V_pn_reg_158;
reg   [15:0] ap_phi_reg_pp0_iter1_tmp_V_pn_reg_158;
reg   [15:0] ap_phi_mux_p_Val2_1_phi_fu_172_p4;
reg   [15:0] p_Val2_1_reg_168;
reg    ap_sig_ioackin_dout_V_V_ap_ack;
wire  signed [63:0] tmp_4_fu_258_p1;
wire   [63:0] tmp_s_fu_277_p1;
reg    ap_reg_ioackin_dout_V_V_ap_ack;
wire  signed [15:0] data_V_fu_194_p1;
wire  signed [30:0] p_Val2_s_fu_288_p2;
wire   [16:0] tmp_5_cast_fu_225_p1;
wire  signed [16:0] i1_fu_228_p2;
wire   [31:0] tmp_2_fu_252_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_92;
reg    ap_condition_155;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_dout_V_V_ap_ack = 1'b0;
end

moving_average_shbkb #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
shift_reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_V_address0),
    .ce0(shift_reg_V_ce0),
    .we0(shift_reg_V_we0),
    .d0(tmp_V_1_reg_310),
    .q0(shift_reg_V_q0),
    .address1(shift_reg_V_address1),
    .ce1(shift_reg_V_ce1),
    .we1(shift_reg_V_we1),
    .d1(shift_reg_V_q0)
);

moving_average_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
moving_average_mucud_U1(
    .din0(data_V_fu_194_p1),
    .din1(coef_V_reg_295),
    .dout(p_Val2_s_fu_288_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((tmp_10_fu_269_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_dout_V_V_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_dout_V_V_ap_ack == 1'b1)) begin
                ap_reg_ioackin_dout_V_V_ap_ack <= 1'b0;
            end else if ((dout_V_V_ap_ack == 1'b1)) begin
                ap_reg_ioackin_dout_V_V_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_92)) begin
        if ((tmp_7_fu_246_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter1_tmp_V_pn_reg_158 <= tmp_V_1_reg_310;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_V_pn_reg_158 <= ap_phi_reg_pp0_iter0_tmp_V_pn_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        i6_reg_127 <= i1_cast_fu_234_p1;
    end else if (((tmp_10_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i6_reg_127 <= i_reg_339;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        i_0_in5_reg_137 <= tmp_5_fu_222_p1;
    end else if (((tmp_10_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_in5_reg_137 <= i6_reg_127;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_reg_326 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_dout_V_V_ap_ack == 1'b1))) begin
        p_Val2_1_reg_168 <= p_Val2_4_reg_348;
    end else if (((tmp_9_fu_238_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        p_Val2_1_reg_168 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        p_Val2_s_7_reg_147 <= 16'd0;
    end else if (((tmp_10_reg_344 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_s_7_reg_147 <= p_Val2_4_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
        coef_V_reg_295 <= coef_V_fu_180_p1;
        window_V_reg_300 <= {{cfg_V[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        eot_V_reg_306 <= din_V[32'd16];
        tmp_9_reg_326 <= i1_fu_228_p2[32'd16];
        tmp_V_1_reg_310 <= {{p_Val2_s_fu_288_p2[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_339 <= i_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_4_reg_348 <= p_Val2_4_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_344 <= i_fu_263_p2[32'd31];
        tmp_7_reg_330 <= tmp_7_fu_246_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_10_reg_344 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i6_phi_fu_130_p4 = i_reg_339;
    end else begin
        ap_phi_mux_i6_phi_fu_130_p4 = i6_reg_127;
    end
end

always @ (*) begin
    if (((tmp_10_reg_344 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_in5_phi_fu_140_p4 = i6_reg_127;
    end else begin
        ap_phi_mux_i_0_in5_phi_fu_140_p4 = i_0_in5_reg_137;
    end
end

always @ (*) begin
    if (((tmp_9_reg_326 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_phi_mux_p_Val2_1_phi_fu_172_p4 = p_Val2_4_reg_348;
    end else begin
        ap_phi_mux_p_Val2_1_phi_fu_172_p4 = p_Val2_1_reg_168;
    end
end

always @ (*) begin
    if (((tmp_7_reg_330 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_V_pn_phi_fu_161_p4 = shift_reg_V_q0;
    end else begin
        ap_phi_mux_tmp_V_pn_phi_fu_161_p4 = ap_phi_reg_pp0_iter1_tmp_V_pn_reg_158;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_dout_V_V_ap_ack == 1'b0)) begin
        ap_sig_ioackin_dout_V_V_ap_ack = dout_V_V_ap_ack;
    end else begin
        ap_sig_ioackin_dout_V_V_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
        cfg_V_ap_ack = 1'b1;
    end else begin
        cfg_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cfg_V_blk_n = cfg_V_ap_vld;
    end else begin
        cfg_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
        din_V_ap_ack = 1'b1;
    end else begin
        din_V_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        din_V_blk_n = din_V_ap_vld;
    end else begin
        din_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_dout_V_V_ap_ack == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        dout_V_V_ap_vld = 1'b1;
    end else begin
        dout_V_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dout_V_V_blk_n = dout_V_V_ap_ack;
    end else begin
        dout_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_155)) begin
        if ((tmp_7_fu_246_p2 == 1'd1)) begin
            shift_reg_V_address0 = 64'd0;
        end else if ((tmp_7_fu_246_p2 == 1'd0)) begin
            shift_reg_V_address0 = tmp_4_fu_258_p1;
        end else begin
            shift_reg_V_address0 = 'bx;
        end
    end else begin
        shift_reg_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_246_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        shift_reg_V_ce0 = 1'b1;
    end else begin
        shift_reg_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_ce1 = 1'b1;
    end else begin
        shift_reg_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_fu_246_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_we0 = 1'b1;
    end else begin
        shift_reg_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_reg_330 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_we1 = 1'b1;
    end else begin
        shift_reg_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (cfg_V_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_9_fu_238_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((tmp_9_fu_238_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (din_V_ap_vld == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((eot_V_reg_306 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_dout_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((eot_V_reg_306 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_dout_V_V_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_155 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_92 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_V_pn_reg_158 = 'bx;

assign coef_V_fu_180_p1 = cfg_V[15:0];

assign data_V_fu_194_p1 = din_V[15:0];

assign dout_V_V = ap_phi_mux_p_Val2_1_phi_fu_172_p4;

assign i1_cast_fu_234_p1 = i1_fu_228_p2;

assign i1_fu_228_p2 = ($signed(17'd131071) + $signed(tmp_5_cast_fu_225_p1));

assign i_fu_263_p2 = ($signed(ap_phi_mux_i6_phi_fu_130_p4) + $signed(32'd4294967295));

assign p_Val2_4_fu_282_p2 = (ap_phi_mux_tmp_V_pn_phi_fu_161_p4 + p_Val2_s_7_reg_147);

assign shift_reg_V_address1 = tmp_s_fu_277_p1;

assign tmp_10_fu_269_p3 = i_fu_263_p2[32'd31];

assign tmp_2_fu_252_p2 = ($signed(ap_phi_mux_i_0_in5_phi_fu_140_p4) + $signed(32'd4294967294));

assign tmp_4_fu_258_p1 = $signed(tmp_2_fu_252_p2);

assign tmp_5_cast_fu_225_p1 = window_V_reg_300;

assign tmp_5_fu_222_p1 = window_V_reg_300;

assign tmp_7_fu_246_p2 = ((ap_phi_mux_i6_phi_fu_130_p4 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_238_p3 = i1_fu_228_p2[32'd16];

assign tmp_s_fu_277_p1 = i6_reg_127;

endmodule //moving_average
